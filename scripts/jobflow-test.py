import argparse
import os
from pathlib import Path, PurePath

from jobflow.core.flow import Flow
from jobflow.core.job import job
from jobflow.managers.local import run_locally
from loguru import logger
from woolworm import Woolworm

parser = argparse.ArgumentParser()
parser.add_argument("input_dir")
parser.add_argument("output_dir")
args = parser.parse_args()
input_dir = args.input_dir
output_dir = args.output_dir

DEBUG = True

# Our data model looks like this:
# PXXXX_YYYYYYY <- This is the barcode that is affiliated with the work. Each work has one barcode.
# |- JPEG2000/ <- This folder contains all JPEG2000 files affiliated with the work in full colorspace.
# |- JPEG/ <- This folder contains all JPEG files affiliated with the work.
# |- MARKER_OUTPUT/
# | |- PXXXX_YYYYYYY_0001/
# | | |- PXXXX_YYYYYYY_0001.md
# | | |- PXXXX_YYYYYYY_meta.json
# | |- PXXXX_YYYYYYY_0002/
# | | |- PXXXX_YYYYYYY.md
# | | |- PXXXX_YYYYYYY_meta.json
# | |- PXXXX_YYYYYYY_0003/
# |- PXXXX_YYYYYYY.PDF


@job
def jp2s_to_jpgs(input_dir):
    """Converts all JPEG2000 files in a directory to JPEG files and returns a list of paths to JPEG files.
    Keyword arguments:
    input_dir (Path-like or string): Path to a barcode directory.
    output_paths (list[Path]): A list of paths to JPG files.
    """
    w = Woolworm()
    output_paths: list = []
    logger.debug(f"Type of input_dir: {type(input_dir)}")
    input_dir = Path(PurePath(input_dir) / "JP2000")
    fs = sorted(os.listdir(input_dir))

    for f in fs:
        logger.debug(f"Now running Woolworm on {str(f)}")
        f: os.PathLike | str  # Declare `f` to be of PathLike type.
        g: os.PathLike | str  # Declare `g` to be of PathLike type.
        f = PurePath(f)
        if f.parts[-1] == ".jpg":
            f = PurePath(os.path.abspath(f))

            g = f.with_suffix(".jpg")
            g = Path(str(g).replace("JP2000", "JPEG"))
            w.Pipelines.process_image(f, g)
            output_paths.append(g)
        else:
            logger.info(f"Skipping {f}, unexpected suffix! ")
    return output_paths


def jp2_to_jpg(input_path, output_path):
    """Converts a JPEG2000 file to a JPEG file using Woolworm Backend. Returns the path of the resulting JPEG file.
    Keyword arguments:
    input_path (Path-like or str): Path to a JPEG2000 file.
    output_path (Path-like or str): Path to destination JPEG file.
    """

    # This is where woolworm happens
    # Input path should be a directory that has the barcode as the name.
    # All it will do is convert the files from jp2 to jpg. Keeping the same resolution but smaller data size.
    pass


@job
def jpgs_2_pdf(input_path, output_path):
    # This is where we convert all of the jpg files generated in the `jp2_to_jpg` job to a PDF where each jpg image is a file of the PDF
    pass


@job
def marker_on_pdf(input_path, output_dir):
    # This is where we run the Document Understanding model.
    # It should take as input the PDF generated by `jpgs_2_pdf` and output each page's contents inside the output_dir
    return None


jpgs = jp2s_to_jpgs(input_dir)
jpgs_output = jpgs.output  # This is the directory where all JPEG files are stored.

pdf_output_path = "./"
pdf = jpgs_2_pdf(jpgs_output, pdf_output_path)
pdf_output = pdf.output  # This is the path to the file where the PDF is stored.

marker = marker_on_pdf(pdf_output, Path(output_dir))


flow = Flow(
    [
        jpgs,
    ]
)


responses = run_locally(flow)
